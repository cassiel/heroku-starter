-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent

* =heroku-starter=

** Setup

Heroku setup (given a local repository with a buildpack project):

#+BEGIN_SRC shell-script
  heroku login
  heroku create [name]
  heroku git:remote -a [name]
#+END_SRC

** Configuration and Installation

Local Python environment setup:

#+BEGIN_SRC shell-script
  pipenv --python python3 install
#+END_SRC

Python dependencies:

#+BEGIN_SRC shell-script
  pipenv install flask
  pipenv install gunicorn
  pipenv install eventlet
  pipenv install requests
#+END_SRC

Local run using:

#+BEGIN_SRC shell-script
  pipenv run python main.py
#+END_SRC

** Heroku Deployment

Heroku environment variables needed:

- ~ON_HEROKU~ (set to anything, such as =YES=) - though doesn't seem obligatory
- ~DB_USER~
- ~DB_PASS~ (see MongoDB below)

Deployment: don't forget the =Procfile=!

** MongoDB (Local)

Local macOS instance downloaded from [[https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/]] - install using Homebrew.

Run database locally in Terminal via =mongod --config /usr/local/etc/mongod.conf=.

Python access: [[https://www.w3schools.com/python/python_mongodb_getstarted.asp]]. Install:

#+BEGIN_SRC shell-script
  pipenv install pymongo
#+END_SRC

Console tests with =db-test.py= etc.

** MongoDB Atlas

Create a free cluster. Firewall IP address restriction can be lifted later.

The Python test script, and ~main.py~, expect ~DB_USER~ and ~DB_PASS~ in the environment. Set these up for Heroku (see above); for local testing using a remote database, use

#+BEGIN_SRC shell-script
  DB_USER=[user] DB_PASS=[pass] pipenv run python main.py
#+END_SRC
